#!/bin/bash
# -*- coding: utf-8; mode: sh; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=sh:et:sw=4:ts=4:sts=4

# Note:
# This script is sourced by the mpbb wrapper script.
# Do not execute this directly!

list-subports-usage() {
    # "prog" is defined in mpbb-help.
    # shellcheck disable=SC2154
    cat <<EOF
usage: $prog [<global opts>] list-subports [<opts>] <port> [<port2> [...]]

Print the name and subports of each given port to standard output.

Options:

  --archive-site=<URL>
    URL to check for preexisting public archives. Defaults to
    \`https://packages.macports.org'.

  --archive-site-private=<URL>
    URL to check for preexisting private archives. Defaults to
    \`https://packages-private.macports.org'.

Run \`$prog help' for global options and a list of other subcommands.
EOF
}

print-subports() {
    local archive_site_public=$1
    local archive_site_private=$2
    local portnames=$3
    local port
    local portgroup
    local ports
    local exclude
    local exclude_reasons
    local reason

    os_version="$(sw_vers -productVersion | cut -d . -f 1-2)"
    # $option_prefix is set in mpbb
    # shellcheck disable=SC2154
    tclsh=${option_prefix}/bin/port-tclsh
    # $option_prefix is set in mpbb
    # shellcheck disable=SC2154
    ports=$("${tclsh}" "${thisdir}/tools/sort-with-subports.tcl" ${portnames} 2>/dev/null) || return
    for port in $ports; do
        exclude=0
        exclude_reasons=()

        if [[ -n "${archive_site_public}" || -n "${archive_site_private}" ]]; then
            # FIXME: this doesn't take selected variants into account
            # $thisdir is set in mpbb
            # shellcheck disable=SC2154
            archive_path=$("${tclsh}" "${thisdir}/tools/archive-path.tcl" "${port}")
            if [[ -f "${archive_path}" ]]; then
                archive_basename=$(basename "${archive_path}")

                # $option_jobs_dir is set in mpbb
                # shellcheck disable=SC2154
                if "${tclsh}" "${option_jobs_dir}/port_binary_distributable.tcl" "${port}"; then
                    archive_type=public
                    archive_distributable="distributable"
                    archive_site="${archive_site_public}"
                else
                    archive_type=private
                    archive_distributable="not distributable"
                    archive_site="${archive_site_private}"
                fi

                if [[ -n "${archive_site}" ]] && curl -fIsL "${archive_site}/${port}/${archive_basename}" > /dev/null; then
                    exclude=1
                    exclude_reasons+=("it is ${archive_distributable} and has already been built and uploaded to the ${archive_type} server")
                fi
            fi
        fi

        if [[ $exclude -eq 0 ]]; then
            if [[ "$port" =~ graveyard ]]; then
                exclude=1
                exclude_reasons+=("its name contains 'graveyard'")
            else
                # $thisdir is set in mpbb
                # shellcheck disable=SC2154
                for portgroup in $("${tclsh}" "${thisdir}/tools/portgroups.tcl" "$port"); do
                    if [ "$portgroup" = "obsolete-1.0" ]; then
                        exclude=1
                        exclude_reasons+=("it includes the obsolete 1.0 PortGroup")
                    fi
                done
            fi
        fi

        if [[ $exclude -eq 0 && ("${os_version}" = "10.6" || "${os_version}" = "10.5") ]]; then
            supported_archs=$("${tclsh}" "${thisdir}/tools/supported-archs.tcl" "${port}")
            if [[ -n "${supported_archs}" ]]; then
                is_64bit_capable="$(sysctl -n hw.cpu64bit_capable)"
                if [[ "${os_version}" = "10.6" && "${is_64bit_capable}" = "0" && ! ("${supported_archs}" == *"x86_64"* && "${supported_archs}" == *"i386"*) ]]; then
                    exclude=1
                    exclude_reasons+=("the ${os_version}_x86_64 builder will build it")
                elif [[ "${os_version}" = "10.5" && "${supported_archs}" != *"ppc"* && "${supported_archs}" != *"noarch"* ]]; then
                    exclude=1
                    exclude_reasons+=("it does not support the ppc arch")
                fi
            fi
        fi

        if [ $exclude -eq 0 ]; then
            echo "$port"
        else
            if [ ${#exclude_reasons[@]} -eq 1 ]; then
                echo >&2 "Excluding '${port}' because ${exclude_reasons[0]}."
            else
                echo >&2 "Excluding '${port}' for the following reasons:"
                for reason in "${exclude_reasons[@]}"; do
                    echo >&2 " - ${reason}"
                done
            fi
        fi
    done
}

list-subports() {
    # $option_log_dir is set in mpbb
    # shellcheck disable=SC2154
    local log_subports_progress="${option_log_dir}/ports-progress.txt"

    local args
    parseopt archive-site:,archive-site-private: "$@" || return
    # $option_archive_site is set by parseopt
    # shellcheck disable=SC2154
    : "${option_archive_site=https://packages.macports.org}"
    # $option_archive_site_private is set by parseopt
    # shellcheck disable=SC2154
    : "${option_archive_site_private=https://packages-private.macports.org}"
    set -- ${args+"${args[@]}"}

    if [ $# -le 0 ]; then
        err "Must specify at least one port"
        return 1
    fi

    success=0

    # prepare the log file and make sure to start with an empty one
    mkdir -p "$option_log_dir"
    > "$log_subports_progress"

    print-subports "${option_archive_site}" "${option_archive_site_private}" "$*" && success=1

    if [ $success -eq 0 ]; then
        err "None of the specified ports were found in the port index."
        return 1
    fi
}
